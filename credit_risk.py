# -*- coding: utf-8 -*-
"""Credit_Risk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fkcNzDIPnj9_Z9pA0Mf-OI-dC0r1Wa8G

<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

# Project Based Internship<br><br>by Rakamin Academy

<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

## Importing Packages
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve, auc
import xgboost as xgb
from sklearn.preprocessing import MinMaxScaler
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import StandardScaler

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

## Importing Data
"""

pd.set_option('display.max_columns', None)

df = pd.read_csv(r'C:\Users\Ibrahim Erlangga\Downloads\loan_data_2007_2014.csv')
df

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

## Data Overview
"""

df.info()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

### Complete Coloumns
"""

kolom_lengkap = [kolom for kolom in df.columns if df[kolom].notna().all()]
kolom_lengkap

for nama_kolom in kolom_lengkap:
    print(f"Kolom {nama_kolom} berisi {df[nama_kolom].count()} data dengan tipe data {df[nama_kolom].dtype}")

print()
print(f"Total dari kolom lengkap sebanyak {len(kolom_lengkap)} kolom")

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

### Partial Missing Value
"""

# partial missing value feature
kolom_kolom = []

for kolom in df.columns:
    if df[kolom].count() != 0:
        if df[kolom].count() < df.shape[0]:
            kolom_kolom.append(kolom)

kolom_kolom

for nama_kolom in kolom_kolom:
    print(f"Kolom {nama_kolom} berisi {df[nama_kolom].count()} data dengan tipe data {df[nama_kolom].dtype}")

print()
print(f"Total dari kolom parsial sebanyak {len(kolom_kolom)} kolom")

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

### Total Missing Value
"""

# total missing value feature
kolom_kosong = []

for kolom in df.columns:
    if df[kolom].count() == 0:
        kolom_kosong.append(kolom)

kolom_kosong

for nama_kolom in kolom_kosong:
    print(f"Kolom {nama_kolom} berisi {df[nama_kolom].count()} data dengan tipe data {df[nama_kolom].dtype}")

print()
print(f"Total dari kolom parsial sebanyak {len(kolom_kosong)} kolom")

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

### Pecentage Missing Value of Partial
"""

def get_data_info(df:pd.DataFrame):
    list_item = []

    for col in df.columns:
        if (df[col].count() > 0) and (df[col].count() < df.shape[0]):
            list_item.append([col, df[col].dtype, df[col].isna().sum(), round(df[col].isna().sum()/df.shape[0], 2), df[col].nunique(), df[col].unique()[:4]])

    desc_df = pd.DataFrame(data=list_item, columns=['Feature', 'Data Type', 'Total Null in Feature', 'Null Percentage', 'Total Unique Element', 'Unique Sample'])
    return desc_df

get_data_info(df)

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

## Data Cleaning

<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

### Data Copy
"""

df_copy = df.copy()
df_copy

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

### Object to Datetime

Beberapa kolom/feature yang merupakan tipe data `datetime` masih bertipe data object yang mungkin hanya diklasifikasikan sebagai string. Fungsi `pd.Datetime()` akan mengubah fitur-fitur dari kolom ini sebagai `datetime`.
"""

supposed_datetime = ["issue_d", "earliest_cr_line", "last_pymnt_d", "next_pymnt_d", "last_credit_pull_d"]

for col_date in supposed_datetime:
    print(df_copy[col_date])
    print()

for col_date in supposed_datetime:
    # df_copy[col_date] = pd.to_datetime(df_copy[col_date])
    # dilihat bentukan tanggal string-nya terlebih dahulu
    # baru ubah ke datetime
    df_copy[col_date] = pd.to_datetime(df_copy[col_date], format='%b-%y')

df_copy[["issue_d", "earliest_cr_line", "last_pymnt_d", "next_pymnt_d", "last_credit_pull_d"]]

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

### Object to Category

Fitur dari data yang bertipe data object, ada yang sebenarnya bertipe data kategori. Tipe kategorinya bisa sebagai nominal dan ordinal. Berikut adalah fitur-fitur yang bertipe objek.
"""

object_col = []

for kolom in df_copy.columns:
    if df_copy[kolom].dtype == "object":
        object_col.append(kolom)

object_col

df_copy[['term',
 'grade',
 'sub_grade',
 'emp_title',
 'emp_length',
 'home_ownership',
 'verification_status',
 'loan_status',
 'pymnt_plan',
 'url',
 'desc',
 'purpose',
 'title',
 'zip_code',
 'addr_state',
 'initial_list_status',
 'application_type']]

for kolom in object_col:
    print(df_copy[kolom].value_counts())
    print()

array_col_object = []

for kolom in object_col:
    array_col_object.append([kolom, df_copy[kolom].nunique(), df[kolom].unique()[:4]])

desc_df = pd.DataFrame(data=array_col_object, columns=['Feature', 'Total Unique Element', 'Unique Sample'])
desc_df

# menetapkan nilai unik bahwa fitur bisa sebagai kategori adalah jika nilai uniknya berjumlah 50 dan tidak lebih
# mencari yang tidak bisa dijadikan kategori

not_categorized = []

for kolom in object_col:
    if df_copy[kolom].nunique()>50 or df_copy[kolom].nunique()==1:
        not_categorized.append(kolom)

not_categorized

categorized = []

for kolom in object_col:
    if df_copy[kolom].nunique()<=50 and df_copy[kolom].nunique()!=1:
        categorized.append(kolom)

categorized

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

#### Catatan I

Saat melihat total nilai unique pada tiap kolom `object`, terdapat beberapa kolom yang nilai uniknya sampai dengan ribuan atau hanya punya satu nilai unik. Hal ini tentu tidak bisa menjadi kategori yang akan dipakai karena himpunan nilainya terlalu banyak. atau tidak cukup (hanya satu nilai). Beberapa kolom yang tidak bisa menjadi data kategori adalah sebagai berikut.

1. `emp_title` (bisa dilakukan dilihat 20 pekerjaan terbanyak yang menggunakan jasa kemudian dihilangkan)
2. `url` (bisa dihilangkan)
3. `zip_code` (bisa dihilangkan)
4. `desc` (bisa dihilangkan)
5. `title` (bisa dilihat 20 title/judul untuk peminjamannya apa kemudian dihilangkan)
6. `application_type` (bisa dihilangkan)

Kemudian, fitur dengan tipe data object di bawah dapat dijadikan acuan dalam melakukan kategorisasi.
1. `term` (ordinal)
2. `grade` (ordinal)
3. `sub_grade` (ordinal)
4. `emp_length` (ordinal)
5. `home_ownership` (nominal)
6. `verification_status` (ordinal)
7. `loan_status` (ordinal)
8. `pymnt_plan` (nominal)
9. `purpose` (nominal)
10. `addr_state` (nominal)
11. `initial_list_status` (nominal)

Dari kedua kelompok tersebut, akan diperlihatkan missing values dari kelompok tipe objek ini.
"""

def get_data_obj(df:pd.DataFrame):
    list_obj = []

    for col in df.columns:
        if df[col].dtypes == "object":
            list_obj.append([col, df[col].isna().sum(), round(100*df[col].isna().sum()/df.shape[0], 2)])

    desc_df = pd.DataFrame(data=list_obj, columns=['Feature','Total Null in Feature', 'Null Percentage'])
    return desc_df

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

get_data_obj(df_copy)

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>

#### Catatan II

Kolom `desc` ternyata mempunyai missing value yang besar. Sedangkan, untuk semua data yang bisa digolongkan sebagai kategori, dapat dikatakan bahwa tingkatan missing value-nya aman dan dapat dilakukan imputasi/pengisian ke beberapa kolom. Fitur kategori yang mempunyai banyak missing value adalah `emp_length` yang mana sebanyak 21008 nilai atau 4.51% data hilang dari fitur tersebut. Selanjutnya, data yang bisa menjadi kategori akan diubah tipe datanya ke dalam tipe kategori.

<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>
##### Ordinal
"""

# grade
temp_grade = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
df_copy['grade'] = pd.Categorical(df_copy['grade'], categories=temp_grade, ordered=True)

# sub_grade
temp_sub = ['A1', 'A2', 'A3', 'A4', 'A5', 'B1', 'B2', 'B3', 'B4', 'B5', 'C1',
       'C2', 'C3', 'C4', 'C5', 'D1', 'D2', 'D3', 'D4', 'D5', 'E1', 'E2',
       'E3', 'E4', 'E5', 'F1', 'F2', 'F3', 'F4', 'F5', 'G1', 'G2', 'G3',
       'G4', 'G5']
df_copy['sub_grade'] = pd.Categorical(df_copy['sub_grade'], categories=temp_sub, ordered=True)

# emp_length
length = ['< 1 year','1 year', '2 years', '3 years', '4 years', '5 years', '6 years', '7 years', '8 years', '9 years', '10+ years']
df_copy['emp_length'] = pd.Categorical(df_copy['emp_length'], categories=length, ordered=True)

# term
df_copy['term'].unique()

# terdapat spasi pada kolom term, terlebih dahulu dihapus
# bisa menggunakan strip, replace, dan mungkin regex (jika complicated)
df_copy['term'] = df_copy['term'].str.strip()
df_copy['term'].unique()

# ubah kolom ke kategori
term_temp = ['36 months', '60 months']
df_copy['term'] = pd.Categorical(df_copy['term'], categories=term_temp, ordered=True)

# verification status
df_copy['verification_status'].unique()

verify_temp = ['Verified', 'Source Verified', 'Not Verified']
df_copy['verification_status'] = pd.Categorical(df_copy['verification_status'], categories=verify_temp, ordered=True)

# loan status
# kategori loan_status bisa dipersempit dan diubah
# memberikan kolom baru untuk pengecilan kategori dan dibuat tipe datanya kategori
df_copy['loan_status'].unique()

# melakukan penambahan kolom baru
# kolom baru diubah punya tipe data kategori
good_crit = ['Current', 'Fully Paid', 'Does not meet the credit policy. Status:Fully Paid']
df_copy['loan_category'] = df_copy['loan_status'].apply(lambda x: 'Good' if x in good_crit else 'Bad')

status = ['Good', 'Bad']
df_copy['loan_category'] = pd.Categorical(df_copy['loan_category'], categories=status, ordered=True)

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
    code{
        font-size: 15px;
    }
</style>
##### Nominal
"""

# langsung
# polanya pengubahannya sama sehingga bisa melakukan looping dalam mengubahnya

nominal_cat = ['home_ownership', 'pymnt_plan', 'purpose', 'addr_state', 'initial_list_status']

for nom_cat in nominal_cat:
    temp_cat = df_copy[nom_cat].unique()
    df_copy[nom_cat] = pd.Categorical(df_copy[nom_cat], categories=temp_cat)

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
#### Summary for `df_copy`
Di bawah ini akan diperlihatkan summary pada `df_copy` dengan `df_copy.info()`
"""

df_copy.info()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
## EDA sebelum Dropping
EDA akan dilakukan untuk fitur-fitur yang kemungkinan akan disisihkan selanjutnya berdasarkan missing value atau kepentingan saat EDA sesudah datanya bersih.

<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
### Data Copy from `df_copy`
"""

df_1 = df_copy.copy()
df_1.info()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
#### Data Object
Data object yang masih berada pada data akan dilakukan statistika univariat. Tidak semua fitur yang akan dilihat analisis multivariatnya. Bagian ini akan memperlihatkan bagaimana distribusi data dari `title` dan `emp_title`.
"""

object_feat = []

for kolom in df_1.columns:
    if df_1[kolom].dtype == 'object' and kolom != 'loan_status':
        object_feat.append(kolom)

object_feat

df_1[object_feat].describe()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
##### `emp_title`
"""

# semenjak value_counts memunculkannya secara descending
# bisa dilihat 20 value kategori teratas yang mempunayi frekuensi terbanyak
df_1['emp_title'].value_counts().iloc[:20]

# penggunaan nama kolom masih banyak yang bercampur
# RN dengan registered nurse adalah nilai yang sama

df_1['emp_title'] = df_1['emp_title'].replace({'RN': 'Registered Nurse'})
df_1['emp_title'] = df_1['emp_title'].str.lower()
df_1['emp_title'].value_counts().iloc[:20]

for i in range (0,5):
    print(df['emp_title'].value_counts().iloc[i])

plt.figure(figsize=(20,10))
ax = sns.countplot(y=df_1['emp_title'],
                   palette=['#50876C']*5 + ['#4CAF50']*15,
                   order = df_1['emp_title'].value_counts().iloc[:20].index)
plt.title('Number of Employment Title', fontsize=14)

# Membuat anotasi
# Label untuk bar berdasarkan count dari kategorinya
for p in ax.patches:
    ax.annotate(f'{int(p.get_width())}', (p.get_width(), p.get_y() + p.get_height() / 2.), ha='left', va='center')

# Menampilkan plot
plt.show()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
##### `title`
Dilakukan analisis pada kolom `title`. Jika diperhatikan, banyak sekali yang harus diberishkan pada kolom ini untuk mengetahui apa saja judul dari permohonan para peminjam dalam meminjam uang.
"""

df_1['title'].value_counts().iloc[:100]

df_1['title'] = df_1['title'].str.lower()
df_1['title'].value_counts().iloc[:100]

# Konversi kolom 'title' ke tipe data string (jika belum)
df_1['title'] = df_1['title'].astype(str)
result_list = df_1[df_1['title'].str.contains('loan', case=False)]['title'].tolist()
result_list

# mengganti semua string yang bermuatan loan hanya menjadi loan
import re

df_1['title'] = df_1['title'].apply(lambda x: re.sub('.*loan.*', 'loan', str(x), flags=re.IGNORECASE))
df_1['title'].value_counts().iloc[:1000]

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
#### Data Numerik
Sebelum bagian dropping, akan ditetapkan bahwasannya threshold untuk sebuah fitur/kolom yang mempunyai missing value lebih dari 70 persen akan dihapus. Di sini, akan diperlihatkan bagaimana distribusi nilai dari kolom-kolom numerik tersebut.
"""

# Melihat feature numerik
df_num = df_1.select_dtypes('number')
df_num.info()

def miss_info(df:pd.DataFrame):
    list_obj = []

    for col in df.columns:
        list_obj.append([col, df[col].isna().sum(), round(100*df[col].isna().sum()/df.shape[0], 2)])

    desc_df = pd.DataFrame(data=list_obj, columns=['Feature','Total Null in Feature', 'Null Percentage'])
    return desc_df

miss_info(df_num)

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
##### Catatan
Terdapat 3 fitur yang memiliki missing value besar, tetapi tidak 100 persen. Akan diperlihatkan bagaimana distribusi nilai dari fitur-fitur tersebut atau hanya memberikan analisis univariat terhadap fitur-fitur ini. Fitur-fitur yang diberikan adalah sebagai berikut.

1. `mths_since_last_delinq`
2. `mths_since_last_record`
3. `mths_since_last_major_derog`

Kemudian, beberapa kolom yang memiliki missing value sekitar 10-20 persen akan dilakukan penghapusan record/baris nantinya. Fitur-fitur tersebut adalah sebagai berikut.

1. `tot_coll_amt`
2. `tot_cur_bal`
3. `total_rev_hi_lim`

Untuk kolom yang mempunyai percentage missing value sedikit, akan dilakukan imputasi/pengisian dengan median.

<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
##### Visualisasi Distribusi
"""

df_miss = df_num[['mths_since_last_delinq',
'mths_since_last_record',
'mths_since_last_major_derog'
]]
df_miss.info()

miss_col = ['mths_since_last_delinq',
            'mths_since_last_record',
            'mths_since_last_major_derog']

# Tentukan jumlah kolom yang ingin ditampilkan dalam setiap baris
num_columns_per_row = 1

# Hitung jumlah baris yang diperlukan
num_rows = (len(miss_col) + num_columns_per_row - 1) // num_columns_per_row

# Atur ukuran gambar setiap plot sesuai kebutuhan
plt.figure(figsize=(18, 6*num_rows))


for i, col in enumerate (miss_col, 1):

    # Setting bins
    # N tidak disesuaikan dengan dataframe.shape[0]
    # disesuaikan dengan kolomnya
    N = df_num[col].count()
    k = 1 + int(np.log2(N))

    # Plotting
    plt.subplot(num_rows, num_columns_per_row, i)
    sns.histplot(df_num[col], kde=True, color='#A8B1DB', bins=k)
    plt.title(f'{col}')
    plt.xlabel('Nilai Fitur')
    plt.ylabel('Frekuensi')

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
## Dropping and Impute
"""

df_clean = df_1.copy()
df_clean.info()

# deleting the numerical with threshold

threshold_percentage = 60


for kolom in df_clean.select_dtypes('number').columns:

    percentage_non_null = (df_clean[kolom].count()/df_clean.shape[0])*100

    if percentage_non_null < threshold_percentage:
        df_clean.drop(kolom, axis=1, inplace=True)

df_clean.select_dtypes('number').info()

not_important = [
    'Unnamed: 0',
    'id',
    'member_id',
    'emp_title',
    'url',
    'zip_code',
    'desc',
    'title',
    'application_type',
    'policy_code']

for col in not_important:
    df_clean.drop(col, axis=1, inplace=True)

df_clean.info()

# filling datetime
# akan menggunakan modus

for col in df_clean.select_dtypes(include='datetime64').columns:
    if df_clean[col].count() < df_clean.shape[0]:
        mode_value = df_clean[col].mode().iloc[0]
        mode_value_datetime = pd.to_datetime(mode_value, errors='coerce')
        df_clean[col].fillna(mode_value_datetime, inplace=True)

df_clean.select_dtypes(include='datetime64').info()

# filling category
# menggunakan modus

for col in df_clean.select_dtypes('category').columns:
    if df_clean[col].count() < df_clean.shape[0]:
        mode_cat = df_clean[col].mode().iloc[0]
        df_clean[col].fillna(mode_cat, inplace=True)

df_clean.select_dtypes('category').info()

# kolom numerik
# diisi dengan median

for col in df_clean.select_dtypes('number').columns:
    if df_clean[col].count() < df_clean.shape[0]:
        mode_num = df_clean[col].median()
        df_clean[col].fillna(mode_num, inplace=True)

df_clean.select_dtypes('number').info()

# drop loan status
df_clean.drop(columns=['loan_status'], axis=1, inplace=True)
df_clean.info()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
## EDA
"""

df_cc = df_clean.copy()
df_cc.info()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
## Categorical Analysis
"""

df_cc_cat = df_cc.select_dtypes('category')
df_cc_cat.info()

# plot

fig, axes = plt.subplots(11,1, figsize=(16,65), squeeze=False)
color_palette = sns.color_palette('pastel', n_colors=len(df_cc_cat.columns))

for i, (col,color) in enumerate(zip(df_cc_cat.columns, color_palette)):
    sns.countplot(x=col, data=df_cc_cat, ax=axes[i, 0], color=color)
    axes[i,0].set_xlabel('')
    axes[i,0].set_ylabel('Frekuensi')
    axes[i,0].set_title(col)

    if i == 7:
        axes[i, 0].set_xticklabels(axes[i, 0].get_xticklabels(), rotation=90, ha='right')
plt.subplots_adjust(hspace=0.8)
plt.show()

"""<style>
    h1{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 25px;
    }
    h2{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 23px;
    }
    h3{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 21px;
    }
    h4{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    h5{
        line-height: 15px;
        margin-bottom: 20px;
        font-weight: Bold;
        font-size: 19px;
    }
    p{
        font-size: 15px;
    }
    ul{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    ol{
        line-height: 20px;
        font-size: 15px;
        padding-left: 20px;
    }
    span{
        font-size: 15px;
    }
    pre{
        border: 4px solid #ccc;
        padding: 15px;
        width: 55%;
        height: 30%;
    }
</style>
## Numerical Analysis
"""

df_cc_num = df_cc.select_dtypes('number')
df_cc_num.info()

# Count matriks korelasi
corr_matrix = df_cc_num.corr().abs()

# Set Plot Size
plt.figure(figsize=(45, 45))

# Create Heatmap
sns.heatmap(corr_matrix, annot=True, cmap='Greens', annot_kws={'size': 14})

# Show plot
plt.show()

high_corr = corr_matrix.where(np.triu(np.ones(corr_matrix.shape, dtype=bool), k=1))
to_drop_corr = [column for column in high_corr.columns if any(high_corr[column] > 0.7)]
to_drop_corr

df_cc.drop(to_drop_corr, axis=1, inplace=True)
df_cc.info()

df_cc_num.drop(to_drop_corr, axis=1, inplace=True)

# Count matriks korelasi
corr_matrix = df_cc_num.corr().abs()

# Set Plot Size
plt.figure(figsize=(45, 45))

# Create Heatmap
sns.heatmap(corr_matrix, annot=True, cmap='Blues', annot_kws={'size': 14})

# Show plot
plt.show()

unused_col = ['pub_rec', 'dti', 'revol_bal', 'total_acc','earliest_cr_line', 'last_credit_pull_d','initial_list_status','tot_coll_amt', 'sub_grade'
,'tot_cur_bal','purpose', 'addr_state', ]
df_cc = df_cc.drop(columns = unused_col)
df_cc.info()

datetime_col = [col for col in df_cc.columns if df_cc[col].dtype == "datetime64[ns]"]
df_cc = df_cc.drop(columns = datetime_col)

df_cc['term'] = df_cc['term'].str.replace(' months', '')
df_cc['term'] = df_cc['term'].astype(float)

df_cc['emp_length'] = df_cc['emp_length'].str.extract('(\d+)').astype(int)
df_cc.info()

encoded_verification = pd.get_dummies(df_cc['verification_status'], prefix='verification', drop_first=True)
encoded_home_ownership = pd.get_dummies(df_cc['home_ownership'], prefix='home', drop_first=True)
encoded_grade = pd.get_dummies(df_cc['grade'], prefix='grade', drop_first=True)

# Combine the encoded features
encoded_categorical = pd.concat([encoded_verification,encoded_home_ownership, encoded_grade], axis=1)
df_cc = pd.concat([df_cc, encoded_categorical], axis=1)

# Drop the original columns
df_cc.drop(['verification_status','home_ownership', 'grade','term','emp_length','pymnt_plan'], axis=1, inplace=True)

df_cc.info()

# Define features (X) and target variable (Y)
X = df_cc.drop('loan_category', axis=1)  # Features
Y = df_cc['loan_category']  # Target variable

# Get the column names as feature names
feature_names = X.columns.tolist()

# Split the data into training and testing sets (80% training, 20% testing)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

# Initialize different models
results = {}
models = {
    'Random Forest': RandomForestClassifier(random_state=42),
    'Logistic Regression': LogisticRegression(random_state=42),
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'Gradient Boosting': GradientBoostingClassifier(random_state=42),
    'K-Nearest Neighbors': KNeighborsClassifier(),
}

# Initialize dictionary to store classification reports
classification_reports = {}
model_names = []
accuracies = []

# Train and evaluate each model
for model_name, model in models.items():
    print(f"Training {model_name}...")
    model.fit(X_train, Y_train)

    print(f"Evaluating {model_name}...")
    Y_pred = model.predict(X_test)

    confusion = confusion_matrix(Y_test, Y_pred)
    classification_rep = classification_report(
        Y_test, Y_pred, target_names=['Good', 'Bad'], zero_division=1  # Handle zero division
    )

    # Store the classification report in the dictionary
    classification_reports[model_name] = classification_rep

    accuracy = accuracy_score(Y_test, Y_pred)

    model_names.append(model_name)
    accuracies.append(accuracy)

    print("\nClassification Report:")
    print(classification_rep)
    print(f"{model_name} Accuracy: {accuracy:.4f}")
    print("=" * 50)

Xov = df_cc.drop(['loan_category'], axis=1)
yov = df_cc['loan_category']

oversample = RandomOverSampler(sampling_strategy = 'not majority')
X_over, y_over = oversample.fit_resample(Xov, yov)

# Split the data into training and testing sets (80% training, 20% testing)
X_train_over, X_test_over, Y_train_over, Y_test_over = train_test_split(X_over, y_over, test_size=0.2, random_state=42)

# Normalize features
scaler = StandardScaler()
X_train_over = scaler.fit_transform(X_train_over)
X_test_over = scaler.fit_transform(X_test_over)

# Initialize different models
results = {}
models = {
    'Random Forest': RandomForestClassifier(random_state=42),
    'Logistic Regression': LogisticRegression(random_state=42),
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'Gradient Boosting': GradientBoostingClassifier(random_state=42),
    'K-Nearest Neighbors': KNeighborsClassifier(),
}

# Initialize dictionary to store classification reports
classification_reports = {}
model_names_over = []
accuracies_over = []

# Train and evaluate each model
for model_name, model in models.items():
    print(f"Training {model_name}...")
    model.fit(X_train_over, Y_train_over)

    print(f"Evaluating {model_name}...")
    Y_pred = model.predict(X_test_over)

    confusion = confusion_matrix(Y_test_over, Y_pred)
    classification_rep = classification_report(
        Y_test_over, Y_pred, target_names=['Good', 'Bad'], zero_division=1  # Handle zero division
    )

    # Store the classification report in the dictionary
    classification_reports[model_name] = classification_rep

    accuracy = accuracy_score(Y_test_over, Y_pred)

    model_names_over.append(model_name)
    accuracies_over.append(accuracy)

    print("\nClassification Report:")
    print(classification_rep)
    print(f"{model_name} Accuracy: {accuracy:.4f}")
    print("=" * 50)